# Binary Search

## Where to use
- On a sorted Search Base

## Time Comlpexity
n -> n/2 -> n/4 -> n/8 -> n/16 .... 1
or 
1 -> 2 -> 4 -> 8 ......... n/2 -> n

2^0, 2^1, 2^2 ....... 2^x
Total number of step = x + 1, 
where n = 2^(x + 1)
so x = (log(n) base 2) - 1

so Time Complexity is log(n)

## Implementation
[java]
int binSearch(int[] nums, int target) {
    int start = 0, end = nums.length - 1;
    while(start <= end) {
        int mid = start + (end - start) / 2;
        if(nums[mid] == target) {
            return mid;
        } else if(nums[mid] > target) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
    }
    return -1;
}
[end]

## Lower Bound - Smallest Index that the number is greater than or equal to the given target
If the target is present, return it's smallest index
If the target is not present, return the largest index of the value smaller than the target.

[java]
int lowerBound(int[] nums, int target) {
    int ans = nums.length; // If there is no answer, then this will be default answer
    int start = 0, end = nums.length - 1;

    while(start <= end) {
        int mid = start + (end - start) / 2;
        if(nums[mid] == target) {
            ans = mid; // This could be an answer
            end = mid - 1;
        } else if(nums[mid] > target)
            end = mid - 1;
        else
            start = mid + 1;
    }
    return ans;
}
[end]

## Upper Bound - Largest Index that the number is smaller than or equal to the given target
[java]
int upperBound(int[] nums, int target) {
    int ans = 0;
    int start = 0, end = nums.length - 1;
    while(stat <= end) {
        int mid = start + (end - start) / 2;
        if(nums[mid] == target) {
            ans = mid;
            start = mid + 1;
        } else if(nums[mid] > target)
            end = mid - 1;
        else
            start = mid + 1;
    }
    return ans;
}
[end]

## 
